{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "2019.02.01.0",
  "parameters": {
    "name": {
      "type": "string"
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "defaultValue": "Basic"
    },
    "Network": {
      "type": "object"
    },
    "loadBalancingRules": {
      "type": "array"
    },
    "publicIPAllocationMethod": {
      "type": "string",
      "allowedValues": [
        "Static",
        "Dynamic"
      ],
      "defaultValue": "Dynamic"
    },
    "ExternalLoadBalancer": {
      "type": "bool",
      "defaultValue": false
    },
    "Location": {
      "type": "string",
      "defaultValue": ""
    },
    "CustomObject": {
      "type": "object",
      "defaultValue": {}
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "Production",
        "Staging",
        "Test",
        "UAT",
        "Development",
        "QA",
        "DisasterRecovery",
        "Other"
      ],
      "metadata": {
        "description": "The Environment type we are building",
        "group": "Tags",
        "order": 1,
        "question": "Please enter environment type : "
      },
      "defaultValue": "Production"
    },
    "buildDate": {
      "type": "string",
      "metadata": {
        "description": "The date of this build",
        "group": "Tags",
        "order": 2,
        "question": "Please enter todays date (mm/dd/yyyy) : "
      },
      "defaultValue": "mm/dd/yyyy"
    },
    "buildBy": {
      "type": "string",
      "metadata": {
        "description": "The name of the person who build this environment",
        "group": "Tags",
        "order": 3,
        "question": "Please enter your full name : "
      },
      "defaultValue": "First Last"
    },
    "RaxAutomationExclude": {
      "type": "string",
      "allowedValues": [
        "None",
        "Monitoring",
        "Passport",
        "Antimalware"
      ],
      "metadata": {
        "description": "Select the automation type you will like to exclude for this VM",
        "group": "Tags",
        "order": 4,
        "label": "Automation Exluce",
        "question": "Choose the type of automation you will like to exclude this from"
      },
      "defaultValue": "None"
    }
  },
  "variables": {
    "location": "[if(empty(parameters('Location')),resourceGroup().location,parameters('Location'))]",
    "LoadBalancerName": "[parameters('name')]",
    "FrontendIpConfigurationName": "[concat(parameters('name'),'-ipc')]",
    "BackendAddressPoolName": "[concat(parameters('name'),'-bep')]",
    "LoadBalancingRuleName": "[concat(parameters('name'),'-rul')]",
    "LoadbalancingProbeName": "[concat(parameters('name'),'-prb')]",
    "vnetId": "[resourceId(parameters('Network').ResourceGroupName, 'Microsoft.Network/virtualNetworks',parameters('Network').VirtualNetworkName)]",
    "subnetId": "[concat(resourceId(parameters('Network').ResourceGroupName, 'Microsoft.Network/virtualNetworks',parameters('Network').VirtualNetworkName),'/subnets/',parameters('Network').SubnetName)]",
    "isExternal": "[if(parameters('ExternalLoadBalancer'),0,1)]",
    "RackspaceTags": {
      "Environment": "[parameters('environment')]",
      "BuildDate": "[parameters('buildDate')]",
      "BuildBy": "[parameters('buildBy')]",
      "RaxAutomation|Exclude": "[parameters('RaxAutomationExclude')]"
    },
    "tags": "[if(not(empty(parameters('CustomObject'))),union(variables('RackspaceTags'),parameters('CustomObject').tags),variables('RackspaceTags'))]",
    "internetalFrontendIpConfiguration": {
      "copy": [
        {
          "name": "frontendIPConfigurations",
          "count": "[length(parameters('loadBalancingRules'))]",
          "input": {
            "name": "[parameters('loadBalancingRules')[copyIndex('frontendIPConfigurations')].FrontendIpConfigurationName]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetId')]"
              },
              "privateIPAddress": "[parameters('loadBalancingRules')[copyIndex('frontendIPConfigurations')].privateIPAddress]",
              "privateIPAllocationMethod": "[parameters('loadBalancingRules')[copyIndex('frontendIPConfigurations')].privateIPAllocationMethod]"
            }
          }
        }
      ]
    },
    "externalFrontendIpConfiguration": {
      "copy": [
        {
          "name": "frontendIPConfigurations",
          "count": 1,
          "input": {
            "name": "[variables('FrontendIpConfigurationName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('name'),'-pip'))]"
              }
            }
          }
        }
      ]
    },
    "frontendIpConfiguration": "[if(equals(variables('isExternal'),1),variables('internetalFrontendIpConfiguration'),variables('externalFrontendIpConfiguration'))]",
    "probes": {
      "copy": [
        {
          "name": "probes",
          "count": "[length(parameters('loadBalancingRules'))]",
          "input": {
            "name": "[concat(variables('LoadbalancingProbeName'),'-',parameters('loadBalancingRules')[copyIndex('probes')].backendPort)]",
            "properties": {
              "protocol": "[parameters('loadBalancingRules')[copyIndex('probes')].protocol]",
              "port": "[parameters('loadBalancingRules')[copyIndex('probes')].backendPort]",
              "intervalInSeconds": "[parameters('loadBalancingRules')[copyIndex('probes')].intervalInSeconds]",
              "numberOfProbes": "[parameters('loadBalancingRules')[copyIndex('probes')].numberOfProbes]"
            }
          }
        }
      ]
    },
    "internalLoadBalancingRules": {
      "copy": [
        {
          "name": "loadBalancingRules",
          "count": "[length(parameters('loadBalancingRules'))]",
          "input": {
            "name": "[concat(variables('LoadBalancingRuleName'),'-',add(copyIndex('loadBalancingRules'),1))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/frontendIPConfigurations/',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].FrontendIpConfigurationName)]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/backendAddressPools/',variables('BackendAddressPoolName'))]"
              },
              "protocol": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].protocol]",
              "frontendPort": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].frontendPort]",
              "backendPort": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].backendPort]",
              "loadDistribution": "[if(not(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].loadDistribution)),'Default',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].loadDistribution)]",
              "idleTimeoutInMinutes": "[if(not(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].idleTimeoutInMinutes)),4,parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].idleTimeoutInMinutes)]",
              "enableFloatingIP": "[if(not(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableFloatingIP)),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableFloatingIP)]",
              "enableTcpReset": "[if(not(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableTcpReset)),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableTcpReset)]",
              "disableOutboundSnat": "[if(not(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].disableOutboundSnat)),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].disableOutboundSnat)]",
              "probe": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/probes/',variables('LoadbalancingProbeName'),'-',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].backendPort)]"
              }
            }
          }
        }
      ]
    },
    "externalLoadBalancingRules": {
      "copy": [
        {
          "name": "loadBalancingRules",
          "count": "[length(parameters('loadBalancingRules'))]",
          "input": {
            "name": "[concat(variables('LoadBalancingRuleName'),'-',add(copyIndex('loadBalancingRules'),1))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/frontendIPConfigurations/',variables('FrontendIpConfigurationName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/backendAddressPools/',variables('BackendAddressPoolName'))]"
              },
              "protocol": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].protocol]",
              "frontendPort": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].frontendPort]",
              "backendPort": "[parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].backendPort]",
              "loadDistribution": "[if(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].loadDistribution),'Default',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].loadDistribution)]",
              "idleTimeoutInMinutes": "[if(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].idleTimeoutInMinutes),4,parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].idleTimeoutInMinutes)]",
              "enableFloatingIP": "[if(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableFloatingIP),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableFloatingIP)]",
              "enableTcpReset": "[if(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableTcpReset),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].enableTcpReset)]",
              "disableOutboundSnat": "[if(empty(parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].disableOutboundSnat),'false',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].disableOutboundSnat)]",
              "probe": {
                "id": "[concat(resourceId(resourceGroup().name,'Microsoft.Network/loadBalancers',variables('LoadBalancerName')),'/probes/',variables('LoadbalancingProbeName'),'-',parameters('loadBalancingRules')[copyIndex('loadBalancingRules')].backendPort)]"
              }
            }
          }
        }
      ]
    },
    "loadBalancingRules": "[if(equals(variables('isExternal'),1),variables('internalLoadBalancingRules'),variables('externalLoadBalancingRules'))]",
    "publicIp": {
      "apiVersion": "2017-09-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('name'),'-pip')]",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [],
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
        "idleTimeoutInMinutes": 4,
        "publicIpAddressVersion": "IPv4"
      }
    },
    "ilb": {
      "name": "[variables('LoadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2018-08-01",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "properties": {
        "frontendIPConfigurations": "[variables('frontendIpConfiguration').frontendIPConfigurations]",
        "backendAddressPools": [
          {
            "name": "[variables('BackendAddressPoolName')]"
          }
        ],
        "loadBalancingRules": "[variables('loadBalancingRules').loadBalancingRules]",
        "probes": "[variables('probes').probes]"
      }
    },
    "elb": {
      "name": "[variables('LoadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2018-08-01",
      "dependsOn": [
        "[concat(parameters('name'),'-pip')]"
      ],
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "properties": {
        "frontendIPConfigurations": "[variables('frontendIpConfiguration').frontendIPConfigurations]",
        "backendAddressPools": [
          {
            "name": "[variables('BackendAddressPoolName')]"
          }
        ],
        "loadBalancingRules": "[variables('loadBalancingRules').loadBalancingRules]",
        "probes": "[variables('probes').probes]"
      }
    },
    "lb": "[if(equals(variables('isExternal'),1),variables('ilb'),variables('elb'))]",
    "LoadBalancer": "[if(equals(variables('isExternal'),1),createArray(variables('lb')),createArray(variables('publicIp'),variables('lb')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "[concat('Deploy-',variables('LoadBalancerName'))]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "2018.11.01.0",
          "resources": "[variables('LoadBalancer')]",
          "outputs": {
          }
        }
      }
    }
  ],
  "outputs": {
    "armTemplate": {
      "type": "object",
      "value": {
        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "2019.02.01.0",
        "parameters": {},
        "variables": {},
        "resources": "[variables('LoadBalancer')]",
        "outputs": {}
      }
    }
  }
}