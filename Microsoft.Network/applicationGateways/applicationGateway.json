{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "2019.02.01.0",
  "parameters": {
    "name": {
      "type": "string"
    },
    "Network": {
      "type": "object"
    },
    "applicationGatewayRules": {
      "type": "array"
    },
    "Size": {
      "type": "string",
      "allowedValues": [
        "Small",
        "Medium",
        "Large"
      ]
    },
    "Tier": {
      "type": "string",
      "allowedValues": [
        "Standard",
        "WAF"
      ]
    },
    "Instances": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10
    },
    "RuleSet": {
      "type": "string",
      "allowedValues": [
        "3.0",
        "2.2.9"
      ],
      "defaultValue": "3.0"
    },
    "Location": {
      "type": "string",
      "defaultValue": ""
    },
    "CustomObject": {
      "type": "object",
      "defaultValue": {}
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "Production",
        "Staging",
        "Test",
        "UAT",
        "Development",
        "QA",
        "DisasterRecovery",
        "Other"
      ],
      "metadata": {
        "description": "The Environment type we are building",
        "group": "Tags",
        "order": 1,
        "question": "Please enter environment type : "
      },
      "defaultValue": "Production"
    },
    "buildDate": {
      "type": "string",
      "metadata": {
        "description": "The date of this build",
        "group": "Tags",
        "order": 2,
        "question": "Please enter todays date (mm/dd/yyyy) : "
      },
      "defaultValue": "mm/dd/yyyy"
    },
    "buildBy": {
      "type": "string",
      "metadata": {
        "description": "The name of the person who build this environment",
        "group": "Tags",
        "order": 3,
        "question": "Please enter your full name : "
      },
      "defaultValue": "First Last"
    },
    "RaxAutomationExclude": {
      "type": "string",
      "allowedValues": [
        "None",
        "Monitoring",
        "Passport",
        "Antimalware"
      ],
      "metadata": {
        "description": "Select the automation type you will like to exclude for this VM",
        "group": "Tags",
        "order": 4,
        "label": "Automation Exluce",
        "question": "Choose the type of automation you will like to exclude this from"
      },
      "defaultValue": "None"
    }
  },
  "variables": {
    "location": "[if(empty(parameters('Location')),resourceGroup().location,parameters('Location'))]",
    "vnetId": "[resourceId(parameters('Network').ResourceGroupName, 'Microsoft.Network/virtualNetworks',parameters('Network').VirtualNetworkName)]",
    "subnetId": "[concat(variables('vnetId'),'/subnets/',parameters('Network').SubnetName)]",
    "SkuNamePass1": "[concat(parameters('Tier'),'_',parameters('Size'))]",
    "SkuName": "[if(equals(variables('SkuNamePass1'),'WAF_Small'),'WAF_Medium',variables('SkuNamePass1'))]",
    "Sku": {
      "name": "[variables('SkuName')]",
      "tier": "[parameters('Tier')]",
      "capacity": "[parameters('Instances')]"
    },
    "RackspaceTags": {
      "Environment": "[parameters('environment')]",
      "BuildDate": "[parameters('buildDate')]",
      "BuildBy": "[parameters('buildBy')]",
      "RaxAutomation|Exclude": "[parameters('RaxAutomationExclude')]"
    },
    "tags": "[if(not(empty(parameters('CustomObject'))),union(variables('RackspaceTags'),parameters('CustomObject').tags),variables('RackspaceTags'))]",
    "webApplicationFirewallConfiguration": {
      "enabled": "[if(equals(parameters('Tier'),'WAF'),'true','false')]",
      "firewallMode": "Detection",
      "ruleSetType": "OWASP",
      "ruleSetVersion": "[parameters('RuleSet')]",
      "disabledRuleGroups": []
    },
    "frontendPorts": {
      "copy": [
        {
          "name": "frontendPorts",
          "count": "[length(parameters('applicationGatewayRules'))]",
          "input": {
            "name": "[concat(parameters('name'),'-fep-',parameters('applicationGatewayRules')[copyIndex('frontendPorts')].frontendPort)]",
            "properties": {
              "Port": "[parameters('applicationGatewayRules')[copyIndex('frontendPorts')].frontendPort]"
            }
          }
        }
      ]
    },
    "publicIpAddress": {
      "apiVersion": "2017-03-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('name'),'-pip')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    "applicationGateway": {
      "apiVersion": "2018-08-01",
      "name": "[parameters('name')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[concat(parameters('name'),'-pip')]"
      ],
      "properties": {
        "sku": "[variables('Sku')]",
        "gatewayIPConfigurations": [
          {
            "name": "[concat(parameters('name'),'-gip')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[concat(parameters('name'),'-ipc')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('name'),'-pip'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "http-probe",
            "properties": {
              "protocol": "Http",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "match": {
                "body": "",
                "statusCodes": [
                  "200-399"
                ]
              }
            }
          }
        ],
        "frontendPorts": "[union(variables('frontendPorts').frontendPorts,variables('frontendPorts').frontendPorts)]",
        "copy": [
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].hostname,'-settings')]",
              "properties": {
                "Port": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].backendPort]",
                "Protocol": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].backendProtocol]",
                "hostname": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].hostname]",
                "cookieBasedAffinity": "Disabled",
                "pickHostNameFromBackendAddress": false,
                "affinityCookieName": "ApplicationGatewayAffinity",
                "path": null,
                "requestTimeout": 20,
                "probe": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) ,'/probes/http-probe')]"
                }
              }
            }
          },
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('backendAddressPools')].hostname,'-bep')]",
              "properties": {
                "BackendAddresses": "[parameters('applicationGatewayRules')[copyIndex('backendAddressPools')].backendAddressPool]"
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname]",
              "properties": {
                "FrontendIPConfiguration": {
                  "Id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) ,'/frontendIPConfigurations/',parameters('name'),'-ipc')]"
                },
                "FrontendPort": {
                  "Id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/frontendPorts/',parameters('name'),'-fep-',parameters('applicationGatewayRules')[copyIndex('httpListeners')].frontendPort)]"
                },
                "Protocol": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].frontendProtocol]",
                "sslCertificate": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/sslCertificates/',parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname,'-certificate')]"
                },
                "hostName": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname]",
                "requireServerNameIndication": true
              }
            }
          },
          {
            "name": "sslCertificates",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('sslCertificates')].hostname,'-certificate')]",
              "properties": {
                "data": "[parameters('applicationGatewayRules')[copyIndex('sslCertificates')].sslCertificate]",
                "password": "[parameters('applicationGatewayRules')[copyIndex('sslCertificates')].sslPassword]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "Name": "[parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/httpListeners/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname)]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/backendAddressPools/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname,'-bep')]"
                },
                "backendHttpSettings": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/backendHttpSettingsCollection/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname,'-settings')]"
                }
              }
            }
          }
        ],
        "webApplicationFirewallConfiguration": "[if(equals(parameters('Tier'),'WAF'),variables('webApplicationFirewallConfiguration'),json('null'))]"
      }
    }
  },
  "resources": [
    {
      "apiVersion": "2017-03-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('name'),'-pip')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2018-08-01",
      "name": "[parameters('name')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[concat(parameters('name'),'-pip')]"
      ],
      "properties": {
        "sku": "[variables('Sku')]",
        "gatewayIPConfigurations": [
          {
            "name": "[concat(parameters('name'),'-gip')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[concat(parameters('name'),'-ipc')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('name'),'-pip'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "http-probe",
            "properties": {
              "protocol": "Http",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "match": {
                "body": "",
                "statusCodes": [
                  "200-399"
                ]
              }
            }
          }
        ],
        "frontendPorts": "[union(variables('frontendPorts').frontendPorts,variables('frontendPorts').frontendPorts)]",
        "copy": [
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].hostname,'-settings')]",
              "properties": {
                "Port": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].backendPort]",
                "Protocol": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].backendProtocol]",
                "hostname": "[parameters('applicationGatewayRules')[copyIndex('backendHttpSettingsCollection')].hostname]",
                "cookieBasedAffinity": "Disabled",
                "pickHostNameFromBackendAddress": false,
                "affinityCookieName": "ApplicationGatewayAffinity",
                "path": null,
                "requestTimeout": 20,
                "probe": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) ,'/probes/http-probe')]"
                }
              }
            }
          },
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('backendAddressPools')].hostname,'-bep')]",
              "properties": {
                "BackendAddresses": "[parameters('applicationGatewayRules')[copyIndex('backendAddressPools')].backendAddressPool]"
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname]",
              "properties": {
                "FrontendIPConfiguration": {
                  "Id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) ,'/frontendIPConfigurations/',parameters('name'),'-ipc')]"
                },
                "FrontendPort": {
                  "Id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/frontendPorts/',parameters('name'),'-fep-',parameters('applicationGatewayRules')[copyIndex('httpListeners')].frontendPort)]"
                },
                "Protocol": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].frontendProtocol]",
                "sslCertificate": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/sslCertificates/',parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname,'-certificate')]"
                },
                "hostName": "[parameters('applicationGatewayRules')[copyIndex('httpListeners')].hostname]",
                "requireServerNameIndication": true
              }
            }
          },
          {
            "name": "sslCertificates",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "name": "[concat(parameters('applicationGatewayRules')[copyIndex('sslCertificates')].hostname,'-certificate')]",
              "properties": {
                "data": "[parameters('applicationGatewayRules')[copyIndex('sslCertificates')].sslCertificate]",
                "password": "[parameters('applicationGatewayRules')[copyIndex('sslCertificates')].sslPassword]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('applicationGatewayRules'))]",
            "input": {
              "Name": "[parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/httpListeners/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname)]"
                },
                "backendAddressPool": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/backendAddressPools/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname,'-bep')]"
                },
                "backendHttpSettings": {
                  "id": "[concat(resourceId(resourceGroup().name, 'Microsoft.Network/applicationGateways', parameters('name')) , '/backendHttpSettingsCollection/',parameters('applicationGatewayRules')[copyIndex('requestRoutingRules')].hostname,'-settings')]"
                }
              }
            }
          }
        ],
        "webApplicationFirewallConfiguration": "[if(equals(parameters('Tier'),'WAF'),variables('webApplicationFirewallConfiguration'),json('null'))]"
      }
    }
  ],
  "outputs": {
    "armTemplate": {
      "type": "object",
      "value": {
        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "2019.02.01.0",
        "parameters": {},
        "variables": {},
        "resources": "[createArray(variables('publicIpAddress'),variables('applicationGateway'))]",
        "outputs": {}
      }
    }
  }
}