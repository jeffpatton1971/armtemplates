{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": [
        "Production",
        "Staging",
        "Test",
        "Development",
        "Q/A",
        "Other"
      ],
      "metadata": {
        "description": "The Environment type we are building"
      },
      "defaultValue": "Production"
    },
    "buildDate": {
      "type": "string",
      "metadata": {
        "description": "The date of this build"
      },
      "defaultValue": "01/01/2999"
    },
    "buildBy": {
      "type": "string",
      "metadata": {
        "description": "The name of the engineer who build this environment"
      },
      "defaultValue": "First Last"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "osDiskStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "vmssName": {
      "type": "string",
      "defaultValue": "vmss01",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 9
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "defaultValue": 5,
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "vnetRGName": {
      "type": "string",
      "defaultValue": "LOC-RSG-ALL-ENV",
      "minLength": 1,
      "metadata": {
        "description": "The name of the Resource Group where we can find the VNET"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "LOC-VNET01",
      "minLength": 1,
      "metadata": {
        "description": "Name of an existing VMNetwork"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "LOC-VNET01-AD-ENV",
      "minLength": 1,
      "metadata": {
        "description": "Name of the Subnet inside of the provided VNET where you want to deploy this Virtual Machine."
      }
    },
 
 
    "ExclusionsPaths": {
      "type": "string",
      "defaultValue": "C:\\rs-pkgs;C:\\System Volume Information\\DFSR;C:\\Sysvol;C:\\ProgramData\\Microsoft\\SharePoint;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions;C:\\Program Files\\Operations Manager;C:\\Program Files\\Microsoft Monitoring Agent;C:\\Program Files\\Microsoft Office Servers;C:\\Program Files\\Microsoft System Center 2012 R2\\Server;C:\\Program Files\\System Center Operations Manager;C:\\Program Files\\System Center Operations Manager 2007;C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Temporary ASP.NET Files;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\ \\Windows\\NTDS;C:\\Windows\\System32\\LogFiles;C:\\Windows\\Sysvol;C:\\Program Files\\Double-Take Software;C:\\Program Files\\DoubleTake;C:\\Program Files\\Exchsrvr;C:\\Program Files\\Ipswitch;C:\\Program Files\\LogMeIn;C:\\Windows\\SoftwareDistribution\\Datastore;C:\\Windows\\Temp\\Gthrsvc C:\\Winnt\\Temp\\Gthrsvc\\",
      "metadata": {
        "description": "Semicolon delimited list of file paths or locations to exclude from scanning"
      }
    },
    "ExclusionsExtensions": {
      "type": "string",
      "defaultValue": ".FWD;.GSC;.GSE;.MYD;.MYI;.SMD;.VAC;.BAK;.CHK;.FRM;.LDF;.LOG;.MBX;.MDF;.NDF;.TRN;.UND;.UNF;.UNH;.UNI;.UNQ;.UNS;.VHD;.VMDX;.WCI;.EDB;.SDS",
      "metadata": {
        "description": "Semicolon delimited list of file extensions to exclude from scanning"
      }
    },
    "ExclusionsProcesses": {
      "type": "string",
      "defaultValue": "HealthService.exe;ManagementService.exe;Microsoft.Mom.Sdk.Service.exe;Microsoft.Mom.ConfigServiceHost.exe;MonitoringHost.exe;pagefile.sys",
      "metadata": {
        "description": "Semicolon delimited list of process names to exclude from scanning"
      }
    },
    "RealtimeProtectionEnabled": {
      "type": "string",
      "defaultValue": "true",
      "metadata": {
        "description": "Indicates whether or not real time protection is enabled (default is true)"
      }
    },
    "ScheduledScanSettingsIsEnabled": {
      "type": "string",
      "defaultValue": "true",
      "metadata": {
        "description": "Indicates whether or not custom scheduled scan settings are enabled (default is false)"
      }
    },
    "ScheduledScanSettingsScanType": {
      "type": "string",
      "defaultValue": "Quick",
      "metadata": {
        "description": "Indicates whether scheduled scan setting type is set to Quick or Full (default is Quick)"
      }
    },
    "ScheduledScanSettingsDay": {
      "type": "string",
      "defaultValue": "7",
      "metadata": {
        "description": "Day of the week for scheduled scan (1-Sunday, 2-Monday, ..., 7-Saturday)"
      }
    },
    "ScheduledScanSettingsTime": {
      "type": "string",
      "defaultValue": "120",
      "metadata": {
        "description": "When to perform the scheduled scan, measured in minutes from midnight (0-1440). For example: 0 = 12AM, 60 = 1AM, 120 = 2AM."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace ID"
      }
    },
    "workspaceKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace key"
      }
    },
    "keyVaultID": {
      "type": "string",
      "defaultValue": ""
    },
    "certificateUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "certificatethumbprint": {
      "type": "string",
      "defaultValue": ""
    },
    "nicPrefixOverride": {
      "type": "string",
      "defaultValue": ""
    },
    "sfClusterName": {
      "type": "string",
      "defaultValue": "sfClusterName"
    }
  },
  "variables": {
    "vnetId": "[resourceId(parameters('vnetRGName'),'Microsoft.Network/virtualnetworks',parameters('vnetName'))]",
    "subnetRef": "[concat(variables('vnetId'),'/subnets/',parameters('subnetName'))]",
 
    "publicIPAddressName": "[concat(parameters('sfClusterName'),'-PIP')]",
    "loadBalancerName": "[concat(parameters('vmssName'),'loadBalancer')]",
    "loadBalancerFrontEndName": "loadBalancerFrontEnd",
    "loadBalancerBackEndName": "loadBalancerBackEnd",
    "loadBalancerProbeName": "loadBalancerHttpProbe",
    "loadBalancerNatPoolName": "loadBalancerNatPool",
 
    "singlePlacementGroup": "true",
   "provisionVMAgent": "true",
    "enableAutomaticUpdates": "true",
 
    "diagnosticsStorageAccountName": "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'diag')]",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/', resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
 
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounter": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounter2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
 
 
    "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounter'),variables('wadperfcounter2'),'<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',parameters('vmssName'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]"
 
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'diag')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "tags": {
        "displayName": "StorageAccount",
        "Environment": "[parameters('environment')]",
        "BuildDate": "[parameters('buildDate')]",
        "BuildBy": "[parameters('buildBy')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "tags": {
        "displayName": "StorageAccountSFCL",
        "Environment": "[parameters('environment')]",
        "BuildDate": "[parameters('buildDate')]",
        "BuildBy": "[parameters('buildBy')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmssName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'diag')]"
      ],
      "sku": {
        "name": "[parameters('vmSize')]",
        "capacity": "[parameters('instanceCount')]"
      },
      "scale": null,
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": "[variables('singlePlacementGroup')]",
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('osDiskStorageAccountType')]"
              }
            },
            "imageReference": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2016-Datacenter",
              "version": "latest"
            }
          },
          "osProfile": {
            "WindowsConfiguration": {
              "provisionVMAgent": "[variables('provisionVMAgent')]",
              "enableAutomaticUpdates": "[variables('enableAutomaticUpdates')]"
            },
            "computerNamePrefix": "[parameters('vmssName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('keyVaultID')]"
                },
                "vaultCertificates": [
                  {
                    "certificateUrl": "[parameters('certificateUrl')]",
                    "certificateStore": "My"
                  }
                ]
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "ipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackEndName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('loadBalancerNatPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "IaaSAntimalware",
                "properties": {
                  "publisher": "Microsoft.Azure.Security",
                  "type": "IaaSAntimalware",
                  "typeHandlerVersion": "1.3",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "AntimalwareEnabled": true,
                    "RealtimeProtectionEnabled": "[parameters('RealtimeProtectionEnabled')]",
                    "ScheduledScanSettings": {
                      "isEnabled": "[parameters('ScheduledScanSettingsIsEnabled')]",
                      "day": "[parameters('ScheduledScanSettingsDay')]",
                      "time": "[parameters('ScheduledScanSettingsTime')]",
                      "scanType": "[parameters('ScheduledScanSettingsScanType')]"
                    },
                    "Exclusions": {
                      "Extensions": "[parameters('ExclusionsExtensions')]",
                      "Paths": "[parameters('ExclusionsPaths')]",
                      "Processes": "[parameters('ExclusionsProcesses')]"
                    }
                  }
                }
              },
              {
                "name": "Microsoft.Insights.VMDiagnosticsSettings",
                "properties": {
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "type": "IaaSDiagnostics",
                  "typeHandlerVersion": "1.5",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                    "storageAccount": "[variables('diagnosticsStorageAccountName')]",
                    "WadCfg": {
                      "DiagnosticMonitorConfiguration": {
                        "overallQuotaInMB": "50000",
                        "EtwProviders": {
                          "EtwEventSourceProviderConfiguration": [
                            {
                              "provider": "Microsoft-ServiceFabric-Actors",
                              "scheduledTransferKeywordFilter": "1",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableActorEventTable"
                              }
                            },
                            {
                              "provider": "Microsoft-ServiceFabric-Services",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableServiceEventTable"
                              }
                            }
                          ],
                          "EtwManifestProviderConfiguration": [
                            {
                              "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                              "scheduledTransferLogLevelFilter": "Information",
                              "scheduledTransferKeywordFilter": "4611686018427387904",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricSystemEventTable"
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "protectedSettings": {
                    "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listkeys(variables('accountid'), '2015-06-15').key1]",
                    "storageAccountEndPoint": "https://core.windows.net"
                  }
                }
              },
              {
                "name": "Microsoft.EnterpriseCloud.Monitoring",
                "properties": {
                  "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                  "type": "MicrosoftMonitoringAgent",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "workspaceId": "[parameters('workspaceId')]"
                  },
                  "protectedSettings": {
                    "workspaceKey": "[parameters('workspaceKey')]"
                  }
                }
              },
              {
                "name": "ServiceFabricNode",
                "properties": {
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "type": "ServiceFabricNode",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl')),'2015-05-01-preview').key2]"
                  },
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('sfClusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[parameters('vmssName')]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "Bronze",
                    "enableParallelJobs": true,
                    "nicPrefixOverride": "[parameters('nicPrefixOverride')]",
                    "certificate": {
                      "thumbprint": "[parameters('certificatethumbprint')]",
                      "x509StoreName": "My"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-06-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(parameters('sfClusterName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-06-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('loadBalancerFrontEndName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('loadBalancerBackendName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 19000,
              "backendPort": 19000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'FabricGatewayProbe')]"
              }
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 19080,
              "backendPort": 19080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'FabricHttpGatewayProbe')]"
              }
            }
          },
          {
            "name": "BulletinRule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 20035,
              "backendPort": 20035,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'BulletinProbe')]"
              }
            }
          },
          {
            "name": "ContentModeratorRule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 27486,
              "backendPort": 27486,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'ContentModeratorProbe')]"
              }
            }
          },
          {
            "name": "Bulletin2Rule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 8224,
              "backendPort": 8224,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'FabricGatewayProbe')]"
              }
            }
          },
          {
            "name": "GatewayRule",
            "properties": {
              "provisioningState": "Succeeded",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "frontendPort": 8709,
              "backendPort": 8709,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', 'GatewayProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": 19000,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": 19080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "ContentModeratorProbe",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": 27486,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "BulletinProbe",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": 20035,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "GatewayProbe",
            "properties": {
              "provisioningState": "Succeeded",
              "protocol": "Tcp",
              "port": 8709,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('loadBalancerNatPoolName')]",
            "properties": {
              "frontendPortRangeStart": 3389,
              "frontendPortRangeEnd": 4500,
              "backendPort": 3389,
              "protocol": "Tcp",
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-07-01-preview",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('sfClusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl')]"
      ],
      "properties": {
        "managementEndpoint": "[concat('https://',reference(variables('publicIPAddressName')).dnsSettings.fqdn,':','19080')]",
        "certificate": {
          "thumbprint": "[parameters('certificateThumbprint')]",
          "x509StoreName": "My"
        },
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "clusterState": "Default",
        "diagnosticsStorageAccountConfig": {
          "storageAccountName": "[concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl')]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "blobEndpoint": "[reference(concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl'), '2016-01-01').primaryEndpoints.blob]",
          "queueEndpoint": "[reference(concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl'), '2016-01-01').primaryEndpoints.queue]",
          "tableEndpoint": "[reference(concat(substring(uniqueString(subscription().id, resourceGroup().id) ,0,10), parameters('vmssName'), 'sfcl'), '2016-01-01').primaryEndpoints.table]"
        },
        "fabricSettings": [
          {
            "parameters": [
              {
                "name": "ClusterProtectionLevel",
                "value": "EncryptAndSign"
              }
            ],
            "name": "Security"
          },
          {
            "name": "EseStore",
            "parameters": [
              {
                "name": "MaxCursors",
                "value": "32768"
              }
            ]
          }
        ],
        "nodeTypes": [
          {
            "name": "[parameters('vmssName')]",
            "clientConnectionEndpointPort": "19000",
            "httpGatewayEndpointPort": "19080",
            "applicationPorts": {
              "endPort": "30000",
              "startPort": "20000"
            },
            "ephemeralPorts": {
              "endPort": "65534",
              "startPort": "49152"
            },
            "isPrimary": true,
            "durabilityLevel": "Bronze",
            "vmInstanceCount": "[parameters('instanceCount')]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "Silver",
        "upgradeMode": "Automatic",
        "vmImage": "Windows"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('sfClusterName')]"
      }
    }
  ]
}